from __future__ import annotations
from pathlib import Path
from typing import Protocol, List, Optional
from backend.domain.models import Order, Vendor, Store

class FilePort(Protocol):
    def get_directory(self) -> Path: ...
    def get_file_path(self, obj, format: str) -> Path: ...
    def parse_filename(self, filename: str) -> dict: ...
    def list_files(self, pattern: str = "*") -> list[Path]: ...
    def read_from_path(self, path: Path): ...
    def save(self, obj, format: str = 'xlsx') -> Path: ...
    def remove(self, path: Path) -> None: ...
    def move(self, src: Path, dest: Path, overwrite: bool = False) -> None: ...

class OrderFilePort(FilePort, Protocol):
    def get_order_files(
        self,
        stores: List[str],
        vendors: List[str],
        formats: Optional[List[str]] = None,
    ) -> List[Path]: ...

    def generate_vendor_upload_file(self, order: Order, context: dict | None = None) -> Path: ...

class VendorFilePort(FilePort, Protocol):

    def get_vendor(self, vendor: str) -> Vendor: ...
    def list_vendor_files(self) -> List[Path]: ...


class StoreFilePort(FilePort, Protocol):

    def get_store(self, store: str) -> Store: ...
    def list_stores(self) -> List[Store]: ...