from __future__ import annotations
from typing import Protocol, List
from backend.domain.models import Order, Vendor, Store
from backend.app.ports.generic import Repository


class OrderRepository(Protocol):
    def get_order(self, store: str, vendor: str, date: str | None = None) -> Order: ...
    def list_orders(self) -> List[Order]: ...
    def list_by_vendor(self, vendor: str) -> List[Order]: ...
    def list_by_store(self, store: str) -> List[Order]: ...
    def remove_order(self, store: str, vendor: str, date: str | None = None) -> None: ...
    def save_order(self, order: Order) -> int: ...

    def generate_vendor_upload_file(self, order: Order, context: dict | None = None) -> None: ...

class VendorRepository(Repository[Vendor], Protocol):
    def get(self, vendor_name: str) -> Vendor: ...
    def list_all(self) -> list[Vendor]: ...
    def save(self, vendor: Vendor) -> None: ...
    def remove(self, vendor_name: str) -> None: ...

class StoreRepository(Repository[Store], Protocol):
    def get(self, store_name: str) -> Store: ...
    def list_all(self) -> List[Store]: ...
    def save(self, store: Store) -> None: ...
    def remove(self, store_name: str) -> None: ...
    