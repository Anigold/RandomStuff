from __future__ import annotations
from pathlib import Path
from typing import Protocol, TypeVar, Generic, Optional, List, Any

T = TypeVar('T')


class Serializer(Protocol, Generic[T]):
    '''Turn domain objects into bytes (and back).'''
    def preferred_format(self) -> str: ...
    def dumps(self, obj: T, format: Optional[str] = None, context: dict | None = None) -> bytes: ...
    def loads(self, data: bytes, format: Optional[str] = None) -> T: ...
    # Optional fast path for local files
    def load_path(self, path: Path) -> T: ...


class Namer(Protocol, Generic[T]):
    '''Decide where & how files are named on disk.'''
    def base_dir(self) -> Path: ...
    def filename(self, obj: T, *, format: str) -> str: ...
    def parse_filename_for_metadata(self, filename: str) -> dict[str, Any]: ...
    def path_for(self, obj: T, *, format: str) -> Path: ...


class Repository(Protocol, Generic[T]):
    '''Abstracts persistence operations (CRUD).'''
    def get(self, key: str) -> T: ...
    def list_all(self) -> List[T]: ...
    def save(self, obj: T) -> None: ...
    def remove(self, key: str) -> None: ...


class BlobStore(Protocol):
    '''
    Minimal filesystem-like surface. Can be implemented by local FS, S3, etc.
    Paths are always absolute when passed in here.
    '''
    # write / read
    def write_bytes(self, path: Path, data: bytes, *, overwrite: bool = False) -> None: ...
    def read_bytes(self, path: Path) -> bytes: ...

    # file ops
    def exists(self, path: Path) -> bool: ...
    def remove(self, path: Path) -> None: ...
    def move(self, src: Path, dest: Path, *, overwrite: bool = False) -> None: ...

    # discovery
    def list_paths(self, base: Path, pattern: str = "*") -> list[Path]: ...
    def ensure_dir(self, path: Path) -> None: ...


class DomainModule(Protocol):
    '''What each domain (Orders, Transfers, â€¦) must provide to plug in.'''
    # Type detection
    def supports_type(self, obj: Any) -> bool: ...
    def supports_path(self, path: Path) -> bool: ...

    # I/O formats
    def preferred_format(self) -> str: ...
    def supported_formats(self) -> set[str]: ...

    # Serialize/deserialize
    def to_bytes(self, obj: Any, *, format: str, context: dict) -> bytes: ...
    def from_bytes(self, data: bytes, *, format: str, context: dict) -> Any: ...
    def from_path(self, path: Path, *, context: dict) -> Any: ...

    # Naming
    def filename_for(self, obj: Any, *, format: str, context: dict) -> str: ...


class Formatter(Protocol[T]):
    '''Domain-agnostic: convert primitives <-> bytes.'''

    def dumps(self, obj: T, format: Optional[str] = None) -> bytes:
        ...

    def loads(self, data: bytes, format: Optional[str] = None) -> T:
        ...

    def load_path(self, path: Path) -> T:
        ...
