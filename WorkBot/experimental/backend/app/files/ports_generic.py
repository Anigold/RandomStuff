from __future__ import annotations
from pathlib import Path
from typing import Protocol, TypeVar, Generic, Optional, Iterable, Any

T = TypeVar("T")

# ---------- Domain-agnostic contracts ----------

class Serializer(Protocol, Generic[T]):
    """Turn domain objects into bytes (and back)."""
    def preferred_format(self) -> str: ...
    def dumps(self, obj: T, format: Optional[str] = None) -> bytes: ...
    def loads(self, data: bytes, format: Optional[str] = None) -> T: ...
    # Optional fast path for local files
    def load_path(self, path: Path) -> T: ...

class Namer(Protocol, Generic[T]):
    """Decide where & how files are named on disk."""
    def base_dir(self) -> Path: ...
    def filename(self, obj: T, *, format: str) -> str: ...
    def parse_metadata(self, filename: str) -> dict[str, Any]: ...

class BlobStore(Protocol):
    """
    Minimal filesystem-like surface. Can be implemented by local FS, S3, etc.
    Paths are always absolute when passed in here.
    """
    # write / read
    def write_bytes(self, path: Path, data: bytes, *, overwrite: bool = False) -> None: ...
    def read_bytes(self, path: Path) -> bytes: ...

    # file ops
    def exists(self, path: Path) -> bool: ...
    def remove(self, path: Path) -> None: ...
    def move(self, src: Path, dest: Path, *, overwrite: bool = False) -> None: ...

    # discovery
    def list_paths(self, base: Path, pattern: str = "*") -> list[Path]: ...
    def ensure_dir(self, path: Path) -> None: ...
